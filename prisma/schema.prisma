// npx prisma db push
// npx prisma generate
// npx prisma migrate dev
// npx prisma migrate deploy
// npx prisma studio
// npx prisma db seed
// npx prisma migrate dev --name 

// lte - меньше или равно
// gte - больше или равно

datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

model Session {
    token            String   @unique
    lastActivityDate DateTime @default(now())
    isActive         Boolean  @default(true)
    user             User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId           String
    createdAt        DateTime @default(now())
}

model User {
    id          String             @id @default(uuid())
    phoneNumber String             @unique
    firstName   String?
    lastName    String?
    email       String?
    sessions    Session[]
    addresses   Address[]
    basket      ProductsInBasket[]
    orders      Order[]
}

model Address {
    id     String  @id @default(uuid())
    adress String
    user   User    @relation(fields: [userId], references: [id])
    userId String  @unique
    orders Order[]
}

model Category {
    id       String    @id @default(uuid())
    title    String
    products Product[]
}

model Product {
    id              String             @id @default(uuid())
    title           String
    price           Int
    description     String?
    category        Category           @relation(fields: [categoryId], references: [id])
    categoryId      String
    baskets         ProductsInBasket[]
    productsInOrder ProductsInOrder[]
}

model ProductsInBasket {
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    products  Product @relation(fields: [productId], references: [id])
    productId String

    @@unique(fields: [userId, productId], name: "id")
}

model ProductsInOrder {
    products  Product @relation(fields: [productId], references: [id])
    productId String
    Order     Order   @relation(fields: [orderId], references: [id])
    orderId   String

    @@unique(fields: [productId, orderId], name: "id")
}

model Order {
    id        String            @id @default(uuid())
    user      User              @relation(fields: [userId], references: [id])
    userId    String
    address   Address           @relation(fields: [addressId], references: [id])
    addressId String
    isPaid    Boolean           @default(false)
    isDeleted Boolean           @default(false)
    products  ProductsInOrder[]
}
